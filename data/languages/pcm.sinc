define alignment=4;

define space IM type=ram_space size=4 default;
define space DM type=ram_space size=4;
define space register type=register_space size=4;

define register offset=0 size=4 [
	r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15
	r31
];

define register offset=0x1000 size=4 [
	sp  # Dummy stack pointer to make the decompiler work.
];

define token instr(32)
	op3128 = (28, 31)
	op2727 = (27, 27)
	r2622  = (22, 26)
	ird    = (22, 26)
	inv    = (21, 21)
	shl    = (20, 20)
	sh     = (15, 19)
	rxryrs = (0, 14)
	rxry   = (5, 14)
	r1410  = (10, 14)
	r0905  = (5, 9)
	r0400  = (0, 4)
;

define token imm(32)
	imm32 = (0, 31)
;

define token imm2(32)
	imm32_2 = (0, 31)
;

attach variables [ r2622 r1410 r0905 r0400 ] [
	r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15
	_  _  _  _  _  _  _  _  _  _  _   _   _   _   _   r31
];


rd: r2622 is r2622 { export r2622; }
rd: r31 is r31 & r2622=31 { export 0:4; }

rx: r1410 is r1410 { export r1410; }
rx: r31 is r31 & r1410=31 { export 0:4; }

ry: r0905 is r0905 { export r0905; }
ry: r31 is r31 & r0905=31 { export 0:4; }

rs: r0400 is r0400 { export r0400; }
rs: r31 is r31 & r0400=31 { export 0:4; }


:nop is (op3128=0b0000 | op3128=0b0001) & op2727=0 & r2622=31 & inv=0 & shl=0 & sh=0 & r1410=31 & r0905=0 & r0400=31 {}


# Data moves and loads.

# Move from register to register. Really just a specialized form of the "add" instruction.
:mv rd,  rx is (op3128=0b0000 | op3128=0b0001) & op2727=0 & rd & inv=0 & (shl=0 | shl=1) & sh=0 & rx & r0400=31 { rd =  rx; }
:mv rd, -rx is (op3128=0b0000 | op3128=0b0001) & op2727=0 & rd & inv=1 & (shl=0 | shl=1) & sh=0 & rx & r0400=31 { rd = -rx; }

# Load immediate.
:loadi rd, #imm32 is (op3128=0b0000 | op3128=0b0001) & op2727=1 & rd & inv=0 & shl=0 & sh=0 & r1410=0 & r0905=0 & r0400=31; imm32 { rd = imm32; }

# Load from address.
:loada rd, [#imm32] is (op3128=0b0000 | op3128=0b0001) & op2727=1 & rd & inv=0 & shl=1 & sh=0 & r1410=0 & r0905=0 & r0400=31; imm32 { rd = *[DM]imm32:4; }


# Arithmetic operations.

# Add two registers.
:add rd, rs,  rx is (op3128=0b0000 | op3128=0b0001) & op2727=0 & rd & inv=0 & (shl=0 | shl=1) & sh=0 & rx & rs { rd = rs +  rx; }
:add rd, rs,  rx >> #sh is (op3128=0b0000 | op3128=0b0001) & op2727=0 & rd & inv=0 & shl=0 & sh & rx & rs { rd = rs +  (rx >> sh); }
:add rd, rs,  rx << #sh is (op3128=0b0000 | op3128=0b0001) & op2727=0 & rd & inv=0 & shl=1 & sh & rx & rs { rd = rs +  (rx << sh); }

# Add immediate.
:addi rd, rs, #imm32 is (op3128=0b0000 | op3128=0b0001) & op2727=1 & rd & inv=0 & shl=0 & sh=0 & r1410=0 & r0905=0 & rs; imm32 { rd = rs + imm32; }

# Add from address.
:adda rd, rs, [#imm32] is (op3128=0b0000 | op3128=0b0001) & op2727=1 & rd & inv=0 & shl=1 & sh=0 & r1410=0 & r0905=0 & rs; imm32 { rd = rs + *[DM]imm32:4; }

# Subtract two registers.
:sub rd, rs, rx is (op3128=0b0000 | op3128=0b0001) & op2727=0 & rd & inv=1 & (shl=0 | shl=1) & sh=0 & rx & rs { rd = rs - rx; }
:sub rd, rs, rx >> #sh is (op3128=0b0000 | op3128=0b0001) & op2727=0 & rd & inv=1 & shl=0 & sh & rx & rs { rd = rs - (rx >> sh); }
:sub rd, rs, rx << #sh is (op3128=0b0000 | op3128=0b0001) & op2727=0 & rd & inv=1 & shl=1 & sh & rx & rs { rd = rs - (rx << sh); }

# Subtract immediate.
:subi rd, rs, #imm32 is (op3128=0b0000 | op3128=0b0001) & op2727=1 & rd & inv=1 & shl=0 & sh=0 & r1410=0 & r0905=0 & rs; imm32 { rd = rs - imm32; }

# Subtract from address.
:suba rd, rs, [#imm32] is (op3128=0b0000 | op3128=0b0001) & op2727=1 & rd & inv=1 & shl=1 & sh=0 & r1410=0 & r0905=0 & rs; imm32 { rd = rs - *[DM]imm32:4; }

# Shift register. Really just a specialized form of the "add" and "sub" instructions.
:srl rd,  rx >> #sh is (op3128=0b0000 | op3128=0b0001) & op2727=0 & rd & inv=0 & shl=0 & sh & rx & r0400=31 { rd =  (rx >> sh); }
:srl rd, -rx >> #sh is (op3128=0b0000 | op3128=0b0001) & op2727=0 & rd & inv=1 & shl=0 & sh & rx & r0400=31 { rd = -(rx >> sh); }
:sll rd,  rx << #sh is (op3128=0b0000 | op3128=0b0001) & op2727=0 & rd & inv=0 & shl=1 & sh & rx & r0400=31 { rd =  (rx << sh); }
:sll rd, -rx << #sh is (op3128=0b0000 | op3128=0b0001) & op2727=0 & rd & inv=1 & shl=1 & sh & rx & r0400=31 { rd = -(rx << sh); }


# Comparison operations.

:eqz rd, rs is op3128=0b0110 & op2727=0 & rd & (inv=0 | inv=1) & (shl=0 | shl=1) & sh=0 & r1410=31 & rs { rd = zext(rs == 0); }

:eq rd, rs, -rx is op3128=0b0110 & op2727=0 & rd & inv=0 & (shl=0 | shl=1) & sh=0 & rx & rs { rd = zext(rs == -rx); }
:eq rd, rs,  rx is op3128=0b0110 & op2727=0 & rd & inv=1 & (shl=0 | shl=1) & sh=0 & rx & rs { rd = zext(rs ==  rx); }
:eq rd, rs, -rx >> #sh is op3128=0b0110 & op2727=0 & rd & inv=0 & shl=0 & sh & rx & rs { rd = zext(rs == -(rx >> sh)); }
:eq rd, rs,  rx >> #sh is op3128=0b0110 & op2727=0 & rd & inv=1 & shl=0 & sh & rx & rs { rd = zext(rs ==  (rx >> sh)); }
:eq rd, rs, -rx << #sh is op3128=0b0110 & op2727=0 & rd & inv=0 & shl=1 & sh & rx & rs { rd = zext(rs == -(rx << sh)); }
:eq rd, rs,  rx << #sh is op3128=0b0110 & op2727=0 & rd & inv=1 & shl=1 & sh & rx & rs { rd = zext(rs ==  (rx << sh)); }

:eqi rd, rs,  -#imm32  is op3128=0b0110 & op2727=1 & rd & inv=0 & shl=0 & sh=0 & rs; imm32 { rd = zext(rs == -imm32); }
:eqi rd, rs,   #imm32  is op3128=0b0110 & op2727=1 & rd & inv=1 & shl=0 & sh=0 & rs; imm32 { rd = zext(rs ==  imm32); }
:eqa rd, rs, -[#imm32] is op3128=0b0110 & op2727=1 & rd & inv=0 & shl=1 & sh=0 & rs; imm32 { rd = zext(rs == -(*[DM]imm32:4)); }
:eqa rd, rs,  [#imm32] is op3128=0b0110 & op2727=1 & rd & inv=1 & shl=1 & sh=0 & rs; imm32 { rd = zext(rs ==  (*[DM]imm32:4)); }

:neqz rd, rs is op3128=0b0111 & op2727=0 & rd & (inv=0 | inv=1) & (shl=0 | shl=1) & sh=0 & r1410=31 & rs { rd = zext(rs != 0); }

:neq rd, rs, -rx is op3128=0b0111 & op2727=0 & rd & inv=0 & (shl=0 | shl=1) & sh=0 & rx & rs { rd = zext(rs != -rx); }
:neq rd, rs,  rx is op3128=0b0111 & op2727=0 & rd & inv=1 & (shl=0 | shl=1) & sh=0 & rx & rs { rd = zext(rs !=  rx); }
:neq rd, rs, -rx >> #sh is op3128=0b0111 & op2727=0 & rd & inv=0 & shl=0 & sh & rx & rs { rd = zext(rs != -(rx >> sh)); }
:neq rd, rs,  rx >> #sh is op3128=0b0111 & op2727=0 & rd & inv=1 & shl=0 & sh & rx & rs { rd = zext(rs !=  (rx >> sh)); }
:neq rd, rs, -rx << #sh is op3128=0b0111 & op2727=0 & rd & inv=0 & shl=1 & sh & rx & rs { rd = zext(rs != -(rx << sh)); }
:neq rd, rs,  rx << #sh is op3128=0b0111 & op2727=0 & rd & inv=1 & shl=1 & sh & rx & rs { rd = zext(rs !=  (rx << sh)); }

:neqi rd, rs,  -#imm32  is op3128=0b0111 & op2727=1 & rd & inv=0 & shl=0 & sh=0 & rs; imm32 { rd = zext(rs != -imm32); }
:neqi rd, rs,   #imm32  is op3128=0b0111 & op2727=1 & rd & inv=1 & shl=0 & sh=0 & rs; imm32 { rd = zext(rs !=  imm32); }
:neqa rd, rs, -[#imm32] is op3128=0b0111 & op2727=1 & rd & inv=0 & shl=1 & sh=0 & rs; imm32 { rd = zext(rs != -(*[DM]imm32:4)); }
:neqa rd, rs,  [#imm32] is op3128=0b0111 & op2727=1 & rd & inv=1 & shl=1 & sh=0 & rs; imm32 { rd = zext(rs !=  (*[DM]imm32:4)); }


# Logical operations.

:and rd, rs,  rx is op3128=0b1000 & op2727=0 & rd & inv=0 & (shl=0 | shl=1) & sh=0 & rx & rs { rd = rs &  rx; }
:and rd, rs, ~rx is op3128=0b1000 & op2727=0 & rd & inv=1 & (shl=0 | shl=1) & sh=0 & rx & rs { rd = rs & ~rx; }
:and rd, rs,  rx >> #sh is op3128=0b1000 & op2727=0 & rd & inv=0 & shl=0 & sh & rx & rs { rd = rs &  (rx >> sh); }
:and rd, rs, ~rx >> #sh is op3128=0b1000 & op2727=0 & rd & inv=1 & shl=0 & sh & rx & rs { rd = rs & ~(rx >> sh); }
:and rd, rs,  rx << #sh is op3128=0b1000 & op2727=0 & rd & inv=0 & shl=1 & sh & rx & rs { rd = rs &  (rx << sh); }
:and rd, rs, ~rx << #sh is op3128=0b1000 & op2727=0 & rd & inv=1 & shl=1 & sh & rx & rs { rd = rs & ~(rx << sh); }

:andi rd, rs,   #imm32  is op3128=0b1000 & op2727=1 & rd & inv=0 & shl=0 & sh=0 & rs; imm32 { rd = rs &  imm32; }
:andi rd, rs,  ~#imm32  is op3128=0b1000 & op2727=1 & rd & inv=1 & shl=0 & sh=0 & rs; imm32 { rd = rs & ~imm32; }
:anda rd, rs,  [#imm32] is op3128=0b1000 & op2727=1 & rd & inv=0 & shl=1 & sh=0 & rs; imm32 { rd = rs &  (*[DM]imm32:4); }
:anda rd, rs, ~[#imm32] is op3128=0b1000 & op2727=1 & rd & inv=1 & shl=1 & sh=0 & rs; imm32 { rd = rs & ~(*[DM]imm32:4); }

:xor rd, rs, rx is op3128=0b1001 & op2727=0 & rd & inv=1 & (shl=0 | shl=1) & sh=0 & rx & rs { rd = rs ^ rx; }
:xor rd, rs, rx >> #sh is op3128=0b1001 & op2727=0 & rd & inv=1 & shl=0 & sh & rx & rs { rd = rs ^ (rx >> sh); }
:xor rd, rs, rx << #sh is op3128=0b1001 & op2727=0 & rd & inv=1 & shl=1 & sh & rx & rs { rd = rs ^ (rx << sh); }

:xori rd, rs,  #imm32  is op3128=0b1001 & op2727=1 & rd & inv=1 & shl=0 & sh=0 & rs; imm32 { rd = rs | imm32; }
:xora rd, rs, [#imm32] is op3128=0b1001 & op2727=1 & rd & inv=1 & shl=1 & sh=0 & rs; imm32 { rd = rs | *[DM]imm32:4; }

:or rd, rs,  rx is op3128=0b1010 & op2727=0 & rd & inv=0 & (shl=0 | shl=1) & sh=0 & rx & rs { rd = rs |  rx; }
:or rd, rs, ~rx is op3128=0b1010 & op2727=0 & rd & inv=1 & (shl=0 | shl=1) & sh=0 & rx & rs { rd = rs | ~rx; }
:or rd, rs,  rx >> #sh is op3128=0b1010 & op2727=0 & rd & inv=0 & shl=0 & sh & rx & rs { rd = rs |  (rx >> sh); }
:or rd, rs, ~rx >> #sh is op3128=0b1010 & op2727=0 & rd & inv=1 & shl=0 & sh & rx & rs { rd = rs | ~(rx >> sh); }
:or rd, rs,  rx << #sh is op3128=0b1010 & op2727=0 & rd & inv=0 & shl=1 & sh & rx & rs { rd = rs |  (rx << sh); }
:or rd, rs, ~rx << #sh is op3128=0b1010 & op2727=0 & rd & inv=1 & shl=1 & sh & rx & rs { rd = rs | ~(rx << sh); }

:ori rd, rs,   #imm32  is op3128=0b1010 & op2727=1 & rd & inv=0 & shl=0 & sh=0 & rs; imm32 { rd = rs |  imm32; }
:ori rd, rs,  ~#imm32  is op3128=0b1010 & op2727=1 & rd & inv=1 & shl=0 & sh=0 & rs; imm32 { rd = rs | ~imm32; }
:ora rd, rs,  [#imm32] is op3128=0b1010 & op2727=1 & rd & inv=0 & shl=1 & sh=0 & rs; imm32 { rd = rs |  (*[DM]imm32:4); }
:ora rd, rs, ~[#imm32] is op3128=0b1010 & op2727=1 & rd & inv=1 & shl=1 & sh=0 & rs; imm32 { rd = rs | ~(*[DM]imm32:4); }

:anor rd, rs,  rx, ry is op3128=0b1011 & op2727=0 & rd & inv=0 & (shl=0 | shl=1) & sh=0 & rx & ry & rs { rd = (rs &  rx) | ry; }
:anor rd, rs, ~rx, ry is op3128=0b1011 & op2727=0 & rd & inv=1 & (shl=0 | shl=1) & sh=0 & rx & ry & rs { rd = (rs & ~rx) | ry; }
:anor rd, rs,  rx >> sh, ry is op3128=0b1011 & op2727=0 & rd & inv=0 & shl=0 & sh & rx & ry & rs { rd = (rs &  (rx >> sh)) | ry; }
:anor rd, rs, ~rx >> sh, ry is op3128=0b1011 & op2727=0 & rd & inv=1 & shl=0 & sh & rx & ry & rs { rd = (rs & ~(rx >> sh)) | ry; }
:anor rd, rs,  rx << sh, ry is op3128=0b1011 & op2727=0 & rd & inv=0 & shl=1 & sh & rx & ry & rs { rd = (rs &  (rx << sh)) | ry; }
:anor rd, rs, ~rx << sh, ry is op3128=0b1011 & op2727=0 & rd & inv=1 & shl=1 & sh & rx & ry & rs { rd = (rs & ~(rx << sh)) | ry; }

:anori rd, rs,   #imm32,  ry is op3128=0b1011 & op2727=1 & rd & inv=0 & shl=0 & sh=0 & r1410=0 & ry & rs; imm32 { rd = (rs &  imm32)          | ry; }
:anori rd, rs,  ~#imm32,  ry is op3128=0b1011 & op2727=1 & rd & inv=1 & shl=0 & sh=0 & r1410=0 & ry & rs; imm32 { rd = (rs & ~imm32)          | ry; }
:anora rd, rs,  [#imm32], ry is op3128=0b1011 & op2727=1 & rd & inv=0 & shl=1 & sh=0 & r1410=0 & ry & rs; imm32 { rd = (rs &  (*[DM]imm32:4)) | ry; }
:anora rd, rs, ~[#imm32], ry is op3128=0b1011 & op2727=1 & rd & inv=1 & shl=1 & sh=0 & r1410=0 & ry & rs; imm32 { rd = (rs & ~(*[DM]imm32:4)) | ry; }

:anori rd, rs,   #imm32,   #imm32_2  is op3128=0b1011 & op2727=1 & rd & inv=0 & shl=0 & sh=1 & r1410=0 & r0905=0 & rs; imm32; imm32_2 { rd = (rs &  imm32)          | imm32_2; }
:anori rd, rs,  ~#imm32,   #imm32_2  is op3128=0b1011 & op2727=1 & rd & inv=1 & shl=0 & sh=1 & r1410=0 & r0905=0 & rs; imm32; imm32_2 { rd = (rs & ~imm32)          | imm32_2; }
:anora rd, rs,  [#imm32], [#imm32_2] is op3128=0b1011 & op2727=1 & rd & inv=0 & shl=1 & sh=1 & r1410=0 & r0905=0 & rs; imm32; imm32_2 { rd = (rs &  (*[DM]imm32:4)) | *[DM]imm32_2:4; }
:anora rd, rs, ~[#imm32], [#imm32_2] is op3128=0b1011 & op2727=1 & rd & inv=1 & shl=1 & sh=1 & r1410=0 & r0905=0 & rs; imm32; imm32_2 { rd = (rs & ~(*[DM]imm32:4)) | *[DM]imm32_2:4; }


# Function call, unconditional.
:call rd, #jump_dest is op3128=0b1100 & op2727=0 & rd & ird & rxry [
	jump_dest = rxry * 4;
] {
	delayslot(1);
	r11 = ird;
	call [jump_dest:4];
}


# Function calls, conditional.

:calln rd, rs, #jump_dest is op3128=0b1100 & op2727=1 & rd & ird & inv=0 & rxry & rs [
	jump_dest = rxry * 4;
] {
	local delayflag = (rs != 0);
	delayslot(1);
	if !delayflag goto inst_next;
	r11 = ird;
	call [jump_dest:4];
}

:callz rd, rs, #jump_dest is op3128=0b1100 & op2727=1 & rd & ird & inv=1 & rxry & rs [
	jump_dest = rxry * 4;
] {
	local delayflag = (rs == 0);
	delayslot(1);
	if !delayflag goto inst_next;
	r11 = ird;
	call [jump_dest:4];
}


# Jump, unconditional.
:jump #jump_dest is op3128=0b1101 & op2727=0 & inv=0 & shl=0 & sh=0 & rxry & r0400=0 [
	jump_dest = rxry * 4;
] {
	delayslot(1);
	goto [jump_dest:4];
}


# Jumps, conditional.

# Jump if non-zero.
:jumpn rs, #jump_dest is op3128=0b1101 & op2727=1 & inv=0 & rxry & rs [
	jump_dest = rxry * 4;
] {
	local delayflag = (rs != 0);
	delayslot(1);
	if !delayflag goto inst_next;
	goto [jump_dest:4];
}

# Jump if zero.
:jumpz rs, #jump_dest is op3128=0b1101 & op2727=1 & inv=1 & rxry & rs [
	jump_dest = rxry * 4;
] {
	local delayflag = (rs == 0);
	delayslot(1);
	if !delayflag goto inst_next;
	goto [jump_dest:4];
}


# Data stores.

# Store register at an address pointed to by a register.
:store rs, [rd] is op3128=0b1110 & op2727=0 & rd & inv=0 & shl=0 & sh=0 & r1410=0 & r0905=0 & rs {
	*[DM]:4 rd = rs;
}

# Store a 16-bit instruction immediate at an address pointed to by a register.
:store #immediate, [rd] is op3128=0b1110 & op2727=0 & rd & inv=1 & shl & sh=0 & rxryrs [
	immediate = (shl << 15) | rxryrs;
] {
	*[DM]:4 rd = immediate;
}

# Store a 16-bit instruction immediate and one or more 32-bit immediates at an address pointed to by a register.
# TODO: Handle more than two data values.
:storei [rd], #immediate, #imm32 is op3128=0b1110 & op2727=1 & rd & inv=0 & shl & sh=0 & rxryrs; imm32 [
	immediate = (shl << 15) | rxryrs;
] {
	*[DM]:4 rd = immediate;
	*[DM]:4 (rd + 4) = imm32;
}

# Store one or more immediates at an address pointed to by an immediate.
# TODO: Handle more than one data value.
:storeai [#imm32], #imm32_2 is op3128=0b1110 & op2727=1 & r2622=0 & inv=1 & shl=0 & sh=1 & r1410=0 & r0905=0 & r0400=0; imm32; imm32_2 {
	*[DM]:4 imm32:4 = imm32_2;
}


# Function return.
# FIXME: The link register functionality is almost certainly wrong.
:return is op3128=0b1111 & op2727=0 & r2622=0 & inv=0 & shl=0 & sh=0 & r1410=0 & r0905=0 & r0400=0 {
	delayslot(1);
	return [r11];
}
